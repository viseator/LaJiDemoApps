package xyz.viseator.v2ex.http;import android.content.Context;import android.os.AsyncTask;import android.support.v7.widget.RecyclerView;import android.util.Log;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import org.jsoup.Jsoup;import org.jsoup.helper.DescendableLinkedList;import org.jsoup.nodes.Document;import org.jsoup.select.Elements;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.lang.reflect.Type;import java.net.URL;import java.util.List;import javax.net.ssl.HttpsURLConnection;import cn.bingoogolapple.refreshlayout.BGARefreshLayout;import xyz.viseator.v2ex.data.MainContent;import xyz.viseator.v2ex.data.NodeInfo;import xyz.viseator.v2ex.ui.MainRecyclerViewAdapter;/** * Created by viseator on 2016/11/24. */public class GetHtmlListTask extends AsyncTask<String, Void, Document> {    private List<MainContent> mainContents;    private RecyclerView recyclerView;    private Context context;    private BGARefreshLayout bgaRefreshLayout;    private static final String TAG = "wudi GetHTMLList";    private static final String JSON_URL_PRE = "https://www.v2ex.com/api/nodes/show.json?name=";    private static final String URL_PRE = "https://www.v2ex.com";    private NodeInfo nodeInfo;    public GetHtmlListTask(Context context, RecyclerView recyclerView, BGARefreshLayout bgaRefreshLayout) {        this.bgaRefreshLayout = bgaRefreshLayout;        this.recyclerView = recyclerView;        this.context = context;    }    @Override    protected Document doInBackground(String... urls) {        getNodeInfo(urls[0]);        Document doc;        try {            doc = Jsoup.connect(urls[0]).get();            return doc;        } catch (IOException e) {            e.printStackTrace();        }        return null;    }    @Override    protected void onPostExecute(Document document) {        mainContents = new DescendableLinkedList<>();        try {            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(context.openFileOutput(                    "test.html", Context.MODE_PRIVATE));            outputStreamWriter.write(document.html());            outputStreamWriter.close();        } catch (IOException e) {            e.printStackTrace();        }        String avatar = nodeInfo.getAvatar_large();        String title = nodeInfo.getTitle();        Elements titles = document.select("span.item_title a");        Elements avatars = document.select("img.avatar");        Elements usernames = document.select("span.small.fade strong");        for (int i = 0; i < titles.size(); i++) {            MainContent mainContent = new MainContent();            mainContent.setNodeAvatar_large(avatars.get(i).attr("src"));            mainContent.setNodeTitle(usernames.get(i).text());            mainContent.setTitle(titles.get(i).text());            mainContent.setMemberAvatar_large(avatars.get(i).attr("src"));            mainContent.setMemberUsername(usernames.get(i).text());            mainContent.setUrl(URL_PRE + titles.get(i).attr("href"));            Elements reply = document.select("a.count_livid[href=" + titles.get(i).attr("href") + "]");            if (!reply.isEmpty()) {                mainContent.setReplies(Integer.parseInt(reply.text()));            } else {                mainContent.setReplies(0);            }            mainContents.add(mainContent);        }        recyclerView.setAdapter(new MainRecyclerViewAdapter(context, mainContents));        bgaRefreshLayout.endRefreshing();    }    private void getNodeInfo(String url) {        String nodeName = null;        for (int i = url.length() - 1; i >= 0; i--) {            if (url.charAt(i) == '/') {                nodeName = url.substring(i + 1);                Log.d(TAG, nodeName);                break;            }        }        try {            URL newUrl = new URL(JSON_URL_PRE + nodeName);            HttpsURLConnection httpsURLConnection;            StringBuilder response = new StringBuilder();            httpsURLConnection = (HttpsURLConnection) newUrl.openConnection();            int statusCode = httpsURLConnection.getResponseCode();            if (statusCode == 200) {                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(                        httpsURLConnection.getInputStream()));                String line;                while ((line = bufferedReader.readLine()) != null) {                    response.append(line);                }                Gson gson = new Gson();                Type theType = new TypeToken<NodeInfo>() {                }.getType();                nodeInfo = gson.fromJson(response.toString(), theType);            }        } catch (IOException e) {            Log.e(TAG, "URL error");            e.printStackTrace();        }    }}